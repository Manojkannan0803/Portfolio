2D Histogram Filter for Localization in a Grid World

Project Overview

This project implements a 2D Histogram Filter algorithm in Python to perform robot localization in a grid-based world. The goal of the histogram filter is to estimate the robot's position over time, given noisy sensor readings and uncertain movement. The belief about the robot's position is updated by processing sensor inputs and motion actions.

Key Features:
1. Localization in a Grid World: The robot's location is represented as a belief grid, where each cell contains the probability of the robot being at that specific location.
2. Sensor Model: The robot senses its surroundings (colors in the grid) with some sensor noise. The sensor may occasionally give incorrect readings (sensor noise).
3. Motion Model: The robot moves randomly, and the algorithm accounts for uncertainty in the robot's movement (motion blur).
4. Visualization: The belief grid is visualized at each step, showing how the robot’s belief about its position evolves over time.

Working:

1. Initialization:
The grid is defined as a matrix where each cell contains a color. The robot starts at a random or specified position in the grid. The belief about the robot's position is initialized uniformly across all grid cells.

2. Sensing:
The robot observes its surroundings (color of the cell it's in). This sensor observation might be noisy, meaning the robot might sense the wrong color (incorrect reading). The histogram filter uses this sensed data to update the belief grid. The algorithm uses a sensor model that increases the probability of the robot being in cells that match the sensed color and decreases the probability of cells that don't match.

3. Motion:
After each sensor update, the robot moves randomly by a small amount (dy, dx). This motion is also uncertain, as the robot might not move exactly as intended due to errors. The belief grid is updated again to account for the movement, which is modeled using a motion model (in this case, a simple random movement with noise).

4. Update Beliefs:
After sensing and moving, the belief grid is updated. Each cell’s probability is recalculated based on the sensor reading and motion. The belief grid is normalized after each update to ensure that the sum of all probabilities remains equal to 1.

5. Visualization:
At each step, the belief grid is displayed, where each cell is represented as a circle, and the size of the circle indicates the belief magnitude. The robot’s true position is shown as a red star on the grid.

Implementation Details

Main Classes & Functions:
	Simulation Class:

		Initialization: Initializes the grid, robot position, and belief grid.
			sense(): Updates the belief grid based on the observed color from the robot’s sensor.
			move(): Updates the belief grid based on the robot's movement.
			get_observed_color(): Returns the color observed by the robot, with some probability of error.
			show_beliefs(): Visualizes the belief grid, showing the robot’s belief about its position.
			random_move(): Simulates random movement of the robot in the grid.
		
		localizer Module:
			initialize_beliefs(): Initializes the belief grid uniformly.
			sense(): Updates the belief grid based on sensor readings.
			move(): Updates the belief grid based on the robot’s movement, considering motion uncertainty.

		helpers Module:
			normalize(): Normalizes the belief grid to ensure the sum of all probabilities is 1.
			blur(): Blurs the belief grid to account for uncertain movements.

	Grid Representation:
		The grid is represented as a list of lists, where each cell contains a color (for example, r for red, g for green). The robot's position and 		the observed color are checked in this grid.

Usage
Run the Simulation:

Initialize the grid, the robot's position, and the belief grid using the Simulation class.
Run the simulation by calling the run() method. The robot will sense and move, updating the belief grid at each step.

Visualize Beliefs:
Use the show_beliefs() function to visualize the belief grid after each update. The grid will show circles, with their size proportional to the belief of the robot being in that location.

Configuration:
The robot's sensor and motion models can be configured by adjusting parameters such as:
	p_hit: The probability that the sensor gives the correct reading.
	p_miss: The probability that the sensor gives an incorrect reading.
	blur: The amount of uncertainty in the robot's movement.


Example code to run the simulation:

grid = [
    ['r', 'g', 'g', 'g', 'r'],
    ['g', 'g', 'r', 'g', 'r'],
    ['g', 'r', 'g', 'g', 'g'],
    ['r', 'r', 'g', 'r', 'g'],
    ['r', 'g', 'r', 'g', 'r'],
]

simulation = Simulation(grid, blur=0.05, p_hit=0.6)
simulation.run(steps=5)
simulation.show_beliefs()


"This project demonstrates how the 2D Histogram Filter can be used to localize a robot in a simple grid world with noisy sensors and uncertain movements. By updating the robot's belief after every sensor reading and movement, this technique provides a robust way to estimate the robot’s position over time, even in the presence of noise and uncertainty."